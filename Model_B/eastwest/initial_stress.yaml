!EvalModel
parameters: [Omega, eCS, b_xx, b_yy, b_zz, b_xy, b_yz, b_xz]
model: !Switch
  #This does not effect the calculations
  [Omega]: !FunctionMap
    map: 
      Omega: |
       zStressDecreaseStart = -9000.;
       zStressDecreaseStop = -11000.;
       zStressDecreaseWidth = zStressDecreaseStart - zStressDecreaseStop;

       if  (z>=zStressDecreaseStart) {
          return 1.0;
       } else {
          if (z>=zStressDecreaseStop) {
             a = 1.0-(z-zStressDecreaseStop)/zStressDecreaseWidth;
             Sx = (3.0*a*a-2.0*a*a*a);
             return 1.0-Sx;
          } else {
            return 0.001;
          }
       }
  [b_xx, b_yy, b_zz, b_xy, b_yz, b_xz]: !EvalModel
    parameters: [sig_zz,S]
    model: !Switch
        [sig_zz]: !FunctionMap
          map: 
            sig_zz: |
              return 2670.0*0.4*9.8*min(-1500.0,z);
        [S]: !FunctionMap
          map:
            S: |
              R = 0.55;
              return (1.0/R-1.0);
    components: !AndersonianStress
      constants:
        mu_d:      0.1
        mu_s:      0.55
        #strike alpha means Shmax=alpha+30
        SH_max:   155.0
        cohesion:  0.0
        #s2ratio<0.5 induces transpression, else transtension
        s2ratio:   0.5
        S_v: 2
 #[eCS]: !FunctionMap
   # map:
     # #avoid positive stress above z=0
      ##0.45 used with 125
  [eCS]: !FunctionMap
    map:
      #avoid positive stress above z=0
      eCS: |
        return 2670.0*0.4*9.8*min(-1500.0,z);
components: !FunctionMap
  map:
    s_xx:     return Omega*b_xx + (1.0-Omega)*eCS;
    s_yy:     return Omega*b_yy + (1.0-Omega)*eCS;
    s_zz:     return Omega*b_zz + (1.0-Omega)*eCS;
    s_xy:     return Omega*b_xy;
    s_yz:     return Omega*b_yz;
    s_xz:     return Omega*b_xz;
